local Stack = {}
Stack.__index = Stack

---------------------------------------------------------------------------------------------------
-- Creates and returns a new stack
function Stack:new()
    local stack = {}
    stack._size = 0
    stack.first = 1;
    return setmetatable(stack, Stack)
end

---------------------------------------------------------------------------------------------------
-- Copies and returns a new stack.
function Stack:copy()
    local stack = {}
    for k, v in pairs(self) do
        stack[k] = v
    end
    return setmetatable(stack, Stack)
end

---------------------------------------------------------------------------------------------------
-- Copies and returns a new stack.
function Stack:clear()
    for k, v in pairs(self) do
        self[k] = nil
    end
    self._size = 0
end

---------------------------------------------------------------------------------------------------
-- Returns the number of values in the stack
function Stack:size()
    return self._size
end


---------------------------------------------------------------------------------------------------
-- Inserts a new value on top of the stack.
function Stack:push(...)
    for k, val in pairs({ ... }) do
        self._size = self._size + 1
        self[self._size] = val
    end
end

---------------------------------------------------------------------------------------------------
-- Removes the top value in the stack and returns it. Returns nil if the stack is empty
function Stack:pop()
    if self._size <= 0 then return nil end
    local val = self[self._size]
    self[self._size] = nil
    self._size = self._size - 1
    return val
end

function Stack:popFirst()
    if self._size <= 0 then return nil end
    local val = self[self.first]
    self[self.first] = nil
    self.first = self.first + 1
    self._size = self._size - 1
    return val
end

function Stack:first()
    if self._size <= 0 then return nil end
    local val = self[self.first]
    self[self.first] = nil
    self._size = self._size - 1
    return val
end

function Stack:get(i)
    return self[i];
end

---------------------------------------------------------------------------------------------------
-- Returns the top value of the stack without removing it.
function Stack:peek()
    return self[self._size]
end

---------------------------------------------------------------------------------------------------
-- Iterate over all elements. Set retain to true to keep the elements from being removed.
function Stack:iterate(retain)
    local i = self:size()
    local count = 0
    return function()
        if i > self.first - 1 then
            i = i - 1
            count = count + 1
            return count, not retain and self:pop() or self[i + 1]
        end
    end
end

function Stack:iter()
    local count = self.first - 1
    return function(jmp)
        if count < self:size() + 1 then
            count = count + (jmp or 1)
            return count, self[count]
        end
        return nil
    end
end

function Stack:dump()
    local iter = self:iter();
    local t, n = iter();
    filehelper.createStackDump();
    while t do
        filehelper.appendToStackDump(t .. " -> ");
        filehelper.appendToStackDump(n);
        filehelper.appendToStackDump("\n");
        t, n = iter();
    end
end

function create(...)
    return Stack:new(...);
end
