local directions = { south = 0, west = 1, north = 2, east = 3 }
local dirVector = {
    [0] = vector.new(0, 0, 1), -- south
    [1] = vector.new(-1, 0, 0), -- west
    [2] = vector.new(0, 0, -1), -- north
    [3] = vector.new(1, 0, 0) -- east
}
local upVector = vector.new(0, 1, 0)
local downVector = vector.new(0, -1, 0)
local interruptMove = false;


local detect = turtle.detect
local detectUp = turtle.detectUp
local detectDown = turtle.detectDown

local selectedSlot = 1;

setmetatable(dirVector, {
    __index = function(_, key)
        return dirVector[key % 4];
    end
})

local pos = vector.new(0, 0, 0)
local direction = 0


local function savePosition()
    local data = { x = pos.x, y = pos.y, z = pos.z, dir = direction };
    filehelper.save(".position", textutils.serialize(data));
end

local function saveGotoLocation(x, y, z)
    local data = { x = x, y = y, z = z }
    filehelper.save(".goto", textutils.serialize(data))
end

local function loadPosition()
    local data = filehelper.load(".position")
    pos = vector.new(data.x, data.y, data.z)
    direction = data.dir or 0
end

local function loadGoto()
    return filehelper.load(".goto")
end

local function setInterrupted(interrupted)
    interruptMove = interrupted;
end

local function _dig(detect, dig, slot)
    local success = false;
    local prevSlot = selectedSlot
    if slot then
        select(slot)
    end

    local tries = 0
    while detect() and tries < 15 do
        success = dig()
        if dig ~= turtle.digDown then
            sleep(0.5)
        end
        tries = tries + 1
    end
    if slot ~= prevSlot then
        select(prevSlot)
    end
    return success;
end

function dig(slot)
    return _dig(turtle.detect, turtle.dig, slot)
end

function digDown(slot)
    return _dig(turtle.detectDown, turtle.digDown, slot)
end

function digUp(slot)
    return _dig(turtle.detectUp, turtle.digUp, slot)
end

local function _move(move, n, dig, attack, dir, onMove, onFail)
    for i = n - 1, 0, -1 do
        while not turtle[move]() do
            if dig and not dig() then
                if interruptMove then setInterrupted(false) return false, i end
                if turtle.inspect then
                    local success, data = turtle.inspect();
                    if success and data.name == "minecraft:bedrock" then
                        if onFail then onFail("bedrock", i) end
                        return false, i;
                    else
                        if not attack() then
                            if turtle.getFuelLevel() == 0 then
                                if onFail then onFail("fuel", i) end
                                return false, i;
                            end
                        else
                            turtle.suck()
                            turtle.suckUp()
                            turtle.suckDown()
                        end
                    end
                else
                    if not attack() then return false, i
                    else
                        turtle.suck()
                        turtle.suckUp()
                        turtle.suckDown()
                    end
                end
            elseif not dig then
                if onFail then
                    if not onFail("dig", i) then
                        return false
                    end
                else
                    return false
                end
            end
        end
        pos = pos + dir;
        savePosition()
        if onMove then onMove(i) end
    end
    return true;
end

-- a bit of a hack to get this right
function back(n, onMove, onFail, force)
    local success, i = _move("back", n or 1, force and function()
        turnAround()
        setInterrupted(true)
        dig()
        return false
    end or nil, turtle.attack, dirVector[2 + direction], onMove, onFail)
    if not success and i then
        return forward(i + 1, function(movesLeft)
            if movesLeft == 0 then turnAround() end
            if onMove then onMove(movesLeft) end
        end, function(reason, left)
            turnAround()
            onFail(reason, left)
        end)
    end
    return success
end

function fBack(n, onMove, onFail)
    return back(n, onMove, onFail, true)
end


function forward(n, onMove, onFail, force)
    return _move("forward", n or 1, force and dig, force and turtle.attack, dirVector[direction], onMove, onFail)
end

function fForward(n, onMove, onFail)
    return forward(n, onMove, onFail, true)
end

function right(n, onMove, onFail)
    turnRight()
    return forward(n, onMove, onFail)
end

function left(n, onMove, onFail)
    turnLeft()
    return forward(n, onMove, onFail)
end

function strafeLeft(n, onMove, onFail)
    turnLeft()
    local success = forward(n, onMove, onFail)
    turnRight()
    return success
end

function strafeRight(n, onMove, onFail)
    turnRight()
    local success = forward(n, onMove, onFail)
    turnLeft()
    return success
end

function up(n, onMove, onFail, force)
    return _move("up", n or 1, force and turtle.digUp, turtle.attackUp, upVector, onMove, onFail);
end

function fUp(n, onMove, onFail)
    return up(n, onMove, onFail, true)
end

function down(n, onMove, onFail, force)
    return _move("down", n or 1, force and turtle.digDown, turtle.attackDown, downVector, onMove, onFail);
end

function fDown(n, onMove, onFail)
    return down(n, onMove, onFail, true)
end

local function _turn(hand, n, onTurn)
    for i = 1, n do
        turtle["turn" .. hand]()
        direction = direction + (hand == "Left" and -1 or 1)
        savePosition()
        if onTurn then
            onTurn(i)
        end
    end
end

function face(dir)
    if type(dir) == "string" then
        dir = directions[dir]
    end
    if direction > 3 or direction < 0 then direction = direction % 4 end

    local turns = dir - direction
    if turns > 2 then turns = turns - 4 end
    if turns < -2 then turns = turns + 4 end
    if turns == -1 then turnLeft()
    elseif turns == 1 then turnRight()
    elseif turns ~= 0 then turnAround()
    end
end

function turnLeft(n, onTurn)
    _turn("Left", n or 1, onTurn)
end

function turnRight(n, onTurn)
    _turn("Right", n or 1, onTurn)
end

function turnAround(onTurn)
    turnRight(2, onTurn)
end

function select(slot)
    local success, err = pcall(turtle.select, slot)
    if success then
        selectedSlot = slot;
        return true
    else
        return false, err
    end
end

function refuel(level, slot)
    level = level or 1000

    if turtle.getFuelLevel() < level then
        if not slot then
            local prevSelected = selected
            for i = 1, 16 do
                if turtle.getItemCount(i) > 0 then
                    select(i)
                    if turtle.refuel(1) then
                        while turtle.getItemCount(i) ~= 0 do
                            if turtle.getFuelLevel() > level then
                                select(prevSelected)
                                return true
                            end
                            turtle.refuel(1)
                        end
                    end
                end
            end
            select(prevSelected)
        end
        return false
    end
    return true
end

local function _place(slot, place)
    local prevSlot = selectedSlot;
    if slot and slot ~= selectedSlot then
        select(slot)
    end

    local success = place()

    if slot ~= prevSlot then
        select(prevSlot)
    end

    return success
end

function place(slot)
    return _place(slot, turtle.place)
end

function placeUp(slot)
    return _place(slot, turtle.placeUp)
end

function placeDown(slot)
    return _place(slot, turtle.placeDown)
end

function placeBack(slot)
    turnAround()
    local success = place(slot)
    turnAround()
    return success
end

function placeLeft(slot)
    turnLeft()
    local success = place(slot)
    turnRight()
    return success
end

function placeRight(slot)
    turnRight()
    local success = place(slot)
    turnLeft()
    return success
end

local function pathfind()
    local stage = 0;
    local substage = {
        [1] = 0,
        [2] = 0,
        [3] = 0
    }

    return function()
        stage = stage + 1

        if stage < 5 then
            if not up() then
                stage = 5
                return false
            end
            return not detect()
        end

        if stage >= 5 and stage < 8 then
            if substage[1] < 3 then
                back()
                stage = 0
                substage[1] = substage[1] + 1
                return false
            else
                stage = 8
            end
        end

        if stage >= 8 and stage < 10 then
            if substage[2] < 3 then
                strafeRight()
                stage = 0
                substage[2] = substage[2] + 1
                return false
            end
        end

        if stage >= 10 and stage < 12 then
            return false, true
        end

        return true
    end
end

function move(x, y, z)
    if not z then z = y y = pos.y end

    if x ~= 0 then
        face(x > 0 and "west" or "east")
        if not forward(math.abs(x)) then return false end
    end

    if z ~= 0 then
        face(z > 0 and "north" or "south")
        if not forward(math.abs(z)) then return false end
    end

    if y ~= 0 then
        if y > 0 then
            down(y)
        else
            up(-y)
        end
    end
    return true
end

function goto(x, y, z)
    saveGotoLocation(x, y, z);

    while not move(pos.x - x, pos.y - y, pos.z - z) do
        local tryPath = pathfind()
        local pathFound, stop
        while not pathFound and not stop do
            pathFound, stop = tryPath()
        end
    end

    fs.delete(".goto")
end

loadPosition();

do
    local gotoloc = loadGoto()
    if gotoloc then
        goto(gotoloc.x, gotoloc.y, gotoloc.z)
    end
end







